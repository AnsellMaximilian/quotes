{"version":3,"sources":["components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","getNewQuote","quotes","Math","floor","random","length","updateQuote","setState","animation","quoteObj","setTimeout","createTweet","state","quote","author","id","style","this","onClick","href","target","rel","title","className","React","Component","App","fetch","then","response","json","quotesObj","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8OAyDeA,E,kDAtDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAOVC,YAAc,WACV,OAAO,EAAKD,MAAME,OAAOC,KAAKC,MAAOD,KAAKE,SAAY,EAAKL,MAAME,OAAOI,UAT1D,EAYlBC,YAAc,WACV,EAAKC,SAAS,CACVC,UAAW,YACXC,SAAU,EAAKT,gBAEnBU,YAAW,WACP,EAAKH,SAAS,CACVC,UAAW,4BAEhB,MArBW,EAwBlBG,YAAc,WAAO,IAAD,EACQ,EAAKC,MAAMH,SAA5BI,EADS,EACTA,MAAOC,EADE,EACFA,OACd,MAAM,IAAN,OAAWD,EAAX,eAAuBC,IAxBvB,EAAKF,MAAQ,CACXH,SAAU,EAAKT,cACfQ,UAAW,yBAJC,E,qDA+Bd,OACI,yBAAKO,GAAG,YAAYC,MAAO,CAACR,UAAWS,KAAKL,MAAMJ,YAC9C,yBAAKO,GAAG,QAAR,IACME,KAAKL,MAAMH,SAASI,MAD1B,KAGA,yBAAKE,GAAG,UAAR,KACOE,KAAKL,MAAMH,SAASK,QAI3B,4BAAQC,GAAG,YAAYG,QAASD,KAAKX,aAArC,aACA,uBAAGS,GAAG,cACFI,KAAI,gDAA2CF,KAAKN,eACpDS,OAAO,SACPC,IAAI,sBACJC,MAAM,oBACN,uBAAGC,UAAU,wB,GAhDVC,IAAMC,WC8BdC,G,wDAzBb,WAAY3B,GAAO,IAAD,8BAChB,cAAMA,IACDa,MAAQ,CACXX,OAAQ,IAHM,E,gEAOE,IAAD,OACjB0B,MAAM,0IACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAG,GAAS,OAAI,EAAKxB,SAAS,CAACN,OAAQ8B,EAAU9B,c,+BAIxD,OACE,yBAAKsB,UAAU,OACiB,IAA7BN,KAAKL,MAAMX,OAAOI,OAAe,iDAA6B,kBAAC,EAAD,CAAUJ,OAAQgB,KAAKL,MAAMX,SAC5F,gCACE,kCAAO,uBAAGc,GAAG,UAAUI,KAAK,uCAArB,4B,GAnBCK,IAAMC,YCMJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ba78b16e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass QuoteBox extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          quoteObj: this.getNewQuote(),\r\n          animation: \"gradient 20s infinite\"\r\n        }\r\n      }\r\n\r\n    getNewQuote = () => {\r\n        return this.props.quotes[Math.floor( Math.random() * (this.props.quotes.length) )]\r\n    }\r\n\r\n    updateQuote = () => {\r\n        this.setState({\r\n            animation: \"flip 0.5s\",\r\n            quoteObj: this.getNewQuote()\r\n        })\r\n        setTimeout(() => {\r\n            this.setState({\r\n                animation: \"gradient 20s infinite\"\r\n            })\r\n        }, 500)\r\n    }\r\n\r\n    createTweet = () => {\r\n        const {quote, author} = this.state.quoteObj\r\n        return `\"${quote}\" - ${author}`\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"quote-box\" style={{animation: this.state.animation}}>\r\n                <div id=\"text\">\r\n                    \"{this.state.quoteObj.quote}\"\r\n                </div>\r\n                <div id=\"author\">\r\n                    - {this.state.quoteObj.author}\r\n                </div>\r\n                \r\n                \r\n                <button id=\"new-quote\" onClick={this.updateQuote}>New Quote</button>\r\n                <a id=\"tweet-quote\" \r\n                    href={`https://twitter.com/intent/tweet?text=${this.createTweet()}`} \r\n                    target=\"_blank\" \r\n                    rel=\"noopener noreferrer\"\r\n                    title=\"Tweet this quote\">\r\n                    <i className=\"fa fa-twitter\"></i>\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuoteBox;","import React from 'react';\n//components\nimport QuoteBox from './components/QuoteBox';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      quotes: []\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n      .then(response => response.json())\n        .then(quotesObj => this.setState({quotes: quotesObj.quotes}))\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        {this.state.quotes.length === 0 ? <h1>Loading quotes...</h1> : <QuoteBox quotes={this.state.quotes}/>}\n        <footer>\n          <h5>By <a id=\"my-link\" href=\"https://github.com/AnsellMaximilian\">Ansell Maximilian</a></h5>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}